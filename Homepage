//
//  ViewController.swift
//  card chase
//
//  Created by administrator on 4/5/20.
//  Copyright Â© 2020 maestroFC. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

    
    
    
    @IBOutlet weak var timerLabel: UILabel!
    
    @IBOutlet weak var playerOneLabel: UILabel!
    
    @IBOutlet weak var playerOneScore: UILabel!
    
    @IBOutlet weak var playerTwoLabel: UILabel!
    
    @IBOutlet weak var playerTwoScore: UILabel!
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    var model = CardModel()
    var cardArray = [Card]()
    var themeChange = false
    var playerOne = ""
    var playerTwo = ""
    var challenger = false
    var gameMode = ""
    var theme = ""
    var cardCount = 0
    var gameOutcome = ""
    var playerWinner = ""
    var timerControl = ""
    
    
    
    var firstFlippedCardIndex:IndexPath?
    
    var timer:Timer?
    var milliseconds:Float = 90 * 1000 // 10 seconds
    
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
       
        //add width for cell
        let viewFrame = view.frame.width * 0.9
        let width = (viewFrame - 15) / 8
        let height = width * 1.41
        let layout = collectionView.collectionViewLayout as! UICollectionViewFlowLayout
        layout.itemSize = CGSize(width: width, height: height)
        
        // Call the getCards method of the card model
        cardArray = model.getCards(msg: theme)
        
        collectionView.delegate = self
        collectionView.dataSource = self
        
        //Create Timer
        if gameMode == "countdown" {
        timer = Timer.scheduledTimer(timeInterval: 0.001, target: self, selector: #selector(timerElapsed), userInfo: nil, repeats: true)
        RunLoop.main.add(timer!, forMode: .common)
            playerOneScore.text = ""
            playerOneLabel.text = ""
            playerTwoScore.text = ""
            playerTwoLabel.text = ""
        } else if gameMode == "challenger" {
            timerLabel.text = ""
            playerOneLabel.text = "\(playerOne)"
            playerOneScore.text = "0"
            playerTwoLabel.text = "\(playerTwo)"
            playerTwoScore.text = "0"
            playerOneLabel.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
            playerOneScore.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
        } else if gameMode == "select" {
            playerOneLabel.text = "Number of moves"
            playerOneScore.text = "0"
            playerTwoLabel.text = ""
            playerTwoScore.text = ""
            timerLabel.text = ""
            playerOneLabel.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
            playerOneScore.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        
        SoundManager.playSound(.shuffle)
 
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        //Dispose of any resources that can be recreated
    }
    
    // MARK: - Timer Methods
    
    @objc func timerElapsed() {
        
        milliseconds -= 1
        
        //Convert to seconds
        
        let seconds = String(format: "%.2f", milliseconds/1000)
        timerControl = String(format: "%.2f", milliseconds/1000)
        
        //Set Label
        timerLabel.text = "Time Remaining: \(seconds)"
        
        // When the timer has reached 0
        if milliseconds <= 0 {
            
            // stop the timer
            timer?.invalidate()
            timerLabel.textColor = UIColor.red
            
            // Check if there are any cards unmatched
            checkGameEnded()
        }
    }

    
    // MARK: - UICollectionView Protocol Methods

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        print("test")
        return cardArray.count
    }
    
    //Attempt
    private func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {
        let cellSpacing = CGFloat(2)
        let leftRightMargin = CGFloat(60)
        let numColumns = CGFloat(3)
        
        let totalCellSpace = cellSpacing * (numColumns - 1)
        let screenWidth = UIScreen.main.bounds.width
        let width = (screenWidth - leftRightMargin - totalCellSpace) / numColumns
        let height = CGFloat(500)
        
        print("test")
        
        return CGSize(width: width, height: height);
      
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        // Get a cardcollectionViewCell object
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "CardCell", for: indexPath) as! CardCollectionViewCell
        
        // get the card that collection view is trying to display
        let card = cardArray[indexPath.row]
        
        //set that card for the cell
        cell.setCard(card)

        return cell
        
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        // Check if there is any time left
        if milliseconds <= 0 {
            return
        }
        
        // get the cell that the user selected
        let cell = collectionView.cellForItem(at: indexPath) as! CardCollectionViewCell
        
        // get card that user selected
        let card = cardArray[indexPath.row]
        
        if card.isFlipped == false && card.isMatched == false {
            //Flip the card
            
            cell.flip()
            
            //Play the flip sound
            SoundManager.playSound(.match)
            
            // set the status of the card
            card.isFlipped = true
            
            // Determine if it is the first or second card
            if firstFlippedCardIndex == nil {
                firstFlippedCardIndex = indexPath
            } else {
                // this is the 2nd card being flipped
                
                //Perform matching logic
            checkForMatches(indexPath)
            }
        
        
    }

} // end of didselect method
    
    // MARK: - Game Logic Methods

    func checkForMatches(_ secondFlippedCardIndex: IndexPath) {
        
        // Get the cells for the two cards that were revealed

        let cardOneCell = collectionView.cellForItem(at: firstFlippedCardIndex!) as? CardCollectionViewCell
        let cardTwoCell = collectionView.cellForItem(at: secondFlippedCardIndex) as? CardCollectionViewCell
        
        
        // get the cells for the two cards that were revealed
        let cardOne = cardArray[firstFlippedCardIndex!.row]
        let cardTwo = cardArray[secondFlippedCardIndex.row]
        
        //Compare the two cards
        
        
        
        if cardOne.imageName == cardTwo.imageName {
            
            //it's a match
            
            // Play sound
            SoundManager.playSound(.match)
            
            // set the status of the card
            cardOne.isMatched = true
            cardTwo.isMatched = true
            
            //remove cards from the grid
            cardOneCell?.remove()
            cardTwoCell?.remove()
            
            if gameMode == "challenger" {
                
            //add plus one to the score
            print(cardCount)
            if cardCount % 2 == 0 {
                var playerOneUpdate:Int = Int(playerOneScore.text!)!
                playerOneUpdate += 1
                playerOneScore.text = "\(playerOneUpdate)"
            } else {
                var playerTwoUpdate:Int = Int(playerTwoScore.text!)!
                playerTwoUpdate += 1
                playerTwoScore.text = "\(playerTwoUpdate)"
                }
            }
            
            // Check if there are any cards unmatched
            checkGameEnded()
            
        } else {
            
            // it's not a match
            
            // Play Sound
            SoundManager.playSound(.nomatch)
            
            // set the status of the card
            cardOne.isFlipped = false
            cardTwo.isFlipped = false
            
            // flip both cards back
            cardOneCell?.flipBack()
            cardTwoCell?.flipBack()
            
        }
        
        //Tell the collection view to reload the cell of the first card if it was nil
        if cardOneCell == nil {
            collectionView.reloadItems(at: [firstFlippedCardIndex!])
        }
        
        //Reset the property that tracks the first card flipped
        firstFlippedCardIndex = nil
        
        //increase card count by 1
        cardCount += 1
        print(cardCount)
        if gameMode == "challenger" {
            if cardCount % 2 == 0 {
        playerOneLabel.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
                playerOneScore.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
                playerTwoLabel.backgroundColor = UIColor.clear
                playerTwoScore.backgroundColor = UIColor.clear
                
            } else {
        playerTwoLabel.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
                playerTwoScore.backgroundColor = UIColor(red: 1, green: 0.9882, blue: 0.9569, alpha: 0.6)
                playerOneLabel.backgroundColor = UIColor.clear
                playerOneScore.backgroundColor = UIColor.clear
            }
        } else if gameMode == "select" {
            playerOneScore.text = "\(cardCount)"        }
    }
    
    func checkGameEnded() {
        
        //Determine if there are any cards unmatched
        var isWon = true
        for card in cardArray {
            
            if card.isMatched == false {
                isWon = false
                break
            }
        }
        
        // Messaging alert
        
        
         if gameMode == "countdown" {
            // If not user has won, stop timer
        if isWon == true {
            
           
                
            if milliseconds > 0 {
                timer?.invalidate()
            }
            
            gameOutcome = "won"
            performSegue(withIdentifier: "gameConfirmation", sender: nil)
            
        } else {
            //If cards unmatched then check if there is any time left
            
            if milliseconds > 0 {
                return
            }
            
            gameOutcome = "lost"
            performSegue(withIdentifier: "gameConfirmation", sender: nil)
            
            
        }
            
        //Show messaging
        //showAlert(title, message)
            
        } else if gameMode == "challenger" {

            if isWon == true {
              let playerOneFinal:Int = Int(playerOneScore.text!)!
              let playerTwoFinal:Int = Int(playerTwoScore.text!)!
               
                if playerOneFinal > playerTwoFinal {
                    gameOutcome = "Winner"
                    playerWinner = "Player One"
                    performSegue(withIdentifier: "gameConfirmation", sender: nil)
                    
                } else if playerTwoFinal > playerOneFinal {
                    gameOutcome = "Winner"
                    playerWinner = "Player Two"
                    performSegue(withIdentifier: "gameConfirmation", sender: nil)
                
                } else {
                    gameOutcome = "Draw"
                    playerWinner = "Player One"
                    performSegue(withIdentifier: "gameConfirmation", sender: nil)
                }
                
            } else {
             return
            }
                
            } else {
                
                if isWon == true {
                    playerWinner = "Player One"
                    performSegue(withIdentifier: "gameConfirmation", sender: nil)
                } else {
                    return
                }
            //Show messaging
            //showAlert(title, message)
        }

            
        }
    
        
    
    
    func showAlert(_ title:String, _ message:String) {
        
        let alert = UIAlertController (title: title, message: message, preferredStyle: .alert)
        
        let alertAction = UIAlertAction(title: "OK", style: .default, handler: nil)

        alert.addAction(alertAction)
        
        present(alert, animated: true, completion: nil)
        
    }
    
    

        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        
        if segue.identifier == "retryGame" {
        
            let playerOneEntry = playerOne
            let playerTwoEntry = playerTwo
            let gameModeUpdate = gameMode
            print(gameMode)
        
        
        let destinationVC = segue.destination as! themeSelect
            
            if gameMode == "challenger" {
            destinationVC.playerOne = playerOneEntry
            destinationVC.playerTwo = playerTwoEntry
            }
            destinationVC.gameMode = gameModeUpdate
        }
            
            if segue.identifier == "gameConfirmation" {
                
                let destinationVC = segue.destination as! ConfirmationViewController
                
                if gameMode == "challenger" {
                destinationVC.playerOne = playerOne
                destinationVC.playerTwo = playerTwo
                destinationVC.playerWinner = playerWinner
                } else if gameMode == "select" {
                    let selectTime : Int = cardCount
                    let cardCountString = String(selectTime)
                    destinationVC.cardCount = cardCountString
                } else if gameMode == "countdown" {
                    destinationVC.timerControl = timerControl
                    
                }
                destinationVC.gameMode = gameMode
                destinationVC.theme = theme
                destinationVC.gameOutcome = gameOutcome
                
                print(playerOne, playerTwo, playerWinner, cardCount, gameMode, theme, gameOutcome, timerControl)
                
            }

    }
    
    
    
} // end of the view controller class


@IBDesignable public class PaddingLabel: UILabel {
   @IBInspectable var topInset: CGFloat = 0
    @IBInspectable var bottomInset: CGFloat = 0
    @IBInspectable var leftInset: CGFloat = 0
    @IBInspectable var rightInset: CGFloat = 0
    
    public override func drawText(in rect: CGRect) {
        let insets = UIEdgeInsets.init(top: topInset, left: leftInset, bottom: bottomInset, right: rightInset)
        super.drawText(in: rect.inset(by: insets))
    }
    
    public override var intrinsicContentSize: CGSize {
        let size = super.intrinsicContentSize
        return CGSize(width: size.width + leftInset + rightInset, height: size.height + topInset + bottomInset)

}
    
    
}
